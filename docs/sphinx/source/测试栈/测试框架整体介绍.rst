========================================================================
测试框架整体介绍
========================================================================

测试框架的设计原则
########################################

1. 测试用例分为两种：文件式，和代码式。文件式测试用例为一个IR文件，代码式的测试用例为生成1个或多个IR文件的代码。
#. 如果一个代码式的测试用例只用来生成1个文件式的测试用例且生成的文件不算太大，则只保存这个文件式的测试用例。
#. 如果一个代码式的测试用例可以生成非常多个文件式的测试用例或这些生成的文件式的测试用例会占用比较大的空间，则只保存代码式的测试用例。
#. 如果文件式的测试用例有很多进一步修改的可能或者询证的需求，则保留其对应的代码式的测试用例。
#. 测试用例最好不带数据，而是包含生成数据的方式，如包含一个随机数种子。但在实际实现中，为了某些便利，部分测试用例带数据。
#. 如果未来可以用数据库管理测试用例，则可以存储更多更大的文件式测试用例。

测试框架的组织
########################################

测试框架包含四个主要部分：

1. 用例库：保存文件式的测试用例，包括 :ref:`算法模型库` , 任务图库，映射图库，行为库。
#. 生成库：保存构建、生成出文件式测试用例的代码式测试用例，以及相应的辅助代码。
#. PyTest测试接口：利用测试用例生成PyTest测试前端。
#. 测试引擎：驱动整个测试流程，调用执行器完成相应组件的执行，调用比较器完成结果的对比。

文件夹组织结构
########################################

test文件下

- model_lib: 算法模型库，存储onnx IR
  
    - L1: LeNet (单核)
    - L2: Small_Squeezenet (几个核), SqueezeNet1_0, SqueezeNet1_1 (几十个核)
    - L3: GoogLeNet, ResNet18, ResNet34, Inception V3, ResNet50, ResNet101, ResNet152, AlexNet, VGG16, VGG19 (多片)
    - L4: 算法模型库所有模型
- task_lib: 任务图库，存储Task IR
- map_lib: 映射库，存储Mapping IR
- behavior_lib: 行为库，存储Assembly IR

    - 1C1P: 单核单原语测试
        - P02等: 各个单原语测试用例文件
        - test_1C1P_S6_C4S5.py: 测试前端，测试Python行为级仿真器与汇编器-时钟精确级仿真器的结果一致性
        - test_1C1P_S6O1S5.py: 测试前端，测试Python行为级仿真器与时钟精确级仿真器的结果一致性
    - 1CMP: 单核多原语测试
        - AR等：各种多原语测试用例文件
        - test_1CMP_S6_C4S5.py: 测试前端，测试Python行为级仿真器与汇编器-时钟精确级仿真器的结果一致性
        - test_1CMP_S6O1S5.py: 测试前端，测试Python行为级仿真器与时钟精确级仿真器的结果一致性
    - MCMP: 多核多原语测试用例文件
        - 
- code_lib: 代码库，存储Code IR
- test_engine: 测试引擎
- generator：用例生成模块（包括部分代码用例的存储），目前比较乱

    - model_generator: 生成量化后的ONNX IR
    - 1C1Pr1Ph: 曾经的1C1P代码测试用例，目前仍需暂时保留作为验证
    - 1CMPr1Ph: 曾经的1CMP代码测试用例和测试前端，目前仍需暂时保留作为验证
    - behavior_generator: 生成Assembly IR
        - prim_utils: 生成原语参数配置的辅助文件
        - map_config_utils: 生成map_config的辅助文件
        - MCMP: 多核多原语测试用例生成代码
        - 1N: 单网络测试用例生成代码
        - primitive_lib: 一些原语参数模板
    